apply plugin: "com.squareup.sqldelight"
apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"

kotlin {

    targets {
        jvm("android")

        final def iosTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")     \
                                  ? presets.iosArm64 : presets.iosX64

        fromPreset(iosTarget, "ios") {
            binaries {
                framework {
                    baseName = "common"
                }
            }
        }
    }

    sourceSets {

        commonMain {
            kotlin.srcDir("src/commonMain/kotlin")

            dependencies {

                // Kotlin
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:${rootProject.ext.coroutinesVersion}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$rootProject.ext.serializationVersion"

                // Ktor
                implementation "io.ktor:ktor-client-core:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-json:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-logging:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-serialization:${rootProject.ext.ktorVersion}"
            }
        }

        androidMain {
            kotlin.srcDir("src/androidMain/kotlin")

            dependencies {

                // Kotlin
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutinesVersion}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:${rootProject.ext.serializationVersion}"

                // Ktor
                implementation "io.ktor:ktor-client-okhttp:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-json-jvm:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-logging-jvm:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-serialization-jvm:${rootProject.ext.ktorVersion}"
            }
        }

        iosMain {
            kotlin.srcDir("src/iosMain/kotlin")

            dependencies {

                // Kotlin
                implementation "org.jetbrains.kotlin:kotlin-stdlib"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:${rootProject.ext.coroutinesVersion}"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:${rootProject.ext.serializationVersion}"

                // Ktor
                implementation "io.ktor:ktor-client-ios:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-json-native:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-logging-native:${rootProject.ext.ktorVersion}"
                implementation "io.ktor:ktor-client-serialization-native:${rootProject.ext.ktorVersion}"

                // SQLDelight
                implementation "com.squareup.sqldelight:native-driver:${rootProject.ext.sqlDelightVersion}"
            }
        }
    }
}

sqldelight {

    Database {
        packageName = "com.vivanov.tinkoffnews"
    }
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'

    inputs.property "mode", mode
    dependsOn kotlin.targets.ios.binaries.getFramework(mode).linkTask

    from { kotlin.targets.ios.binaries.getFramework(mode).outputDirectory }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}

tasks.build.dependsOn packForXCode
